# This settings can be used to create org level settings
# if the settings are not in the optional section, then the settings are considered to be mandatory 
# and cannot be overridden by the submitted issue
repository: 
  # This is the settings that need to be applied to all repositories in the org 
  # See https://developer.github.com/v3/repos/#edit for all available settings for a repository  
  # A short description of the repository that will show up on GitHub
  
  
  # A URL with more information about the repository
  homepage: https://github.com/{name of the repo}
    
  # Keep this as true for most cases
  # A lot of the policies below cannot be implemented on bare repos
  # Pass true to create an initial commit with empty README.
  auto_init: true
    
  # A list of topics to set on the repository
  # something like a list of topics can be listed in the mandatory section which will require these settings
  # are applied. If there are optional settings for topics, then the optional settings are also applied.
  # the lists are considered culmulative. So if the mandatory section has 3 topics and the optional section has 2 topics
  # then the repo will have 5 topics
  topics: 
  - github
  - auto-created

 
  # # Settings for Code security and analysis
  # # Dependabot Alerts
  # security:
  #   enableVulnerabilityAlerts: false
  #   enableAutomatedSecurityFixes: false
  
  # Either `private` to make the repository private, 'internal' to make visbility internal, or `public` to make it public. 
  # if Org members cannot change the visibility of repos, then put do not put into the optional section
  # it would result in an error when updating a repo
  # if the enterprise does not want public repos, then allow only private and internal 
  visibility: internal
  
  # Either `true` to enable issues for this repository, `false` to disable them.
  has_issues: true
  
  # Either `true` to enable projects for this repository, or `false` to disable them.
  # If projects are disabled for the organization, passing `true` will cause an API error.
  has_projects: true
  
  # Either `true` to enable the wiki for this repository, `false` to disable it.
  has_wiki: true
  
  # The default branch for this repository.
  default_branch: main
  
  # Choose an [open source license template](https://choosealicense.com/) 
  # that best suits your needs, and then use the 
  # [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) 
  # as the `license_template` string. For example, "mit" or "mpl-2.0".
  #license_template: mit
  
  # Either `true` to allow squash-merging pull requests, or `false` to prevent
  # squash-merging.
  allow_squash_merge: true
  
  # Either `true` to allow merging pull requests with a merge commit, or `false`
  # to prevent merging pull requests with merge commits.
  allow_merge_commit: true
  
  # # Either `true` to allow rebase-merging pull requests, or `false` to prevent
  # # rebase-merging.
  # allow_rebase_merge: true
  
  # Either `true` to allow auto-merge on pull requests, 
  # or `false` to disallow auto-merge.
  # Default: `false`
  allow_auto_merge: true
  
  # Either `true` to allow automatically deleting head branches 
  # when pull requests are merged, or `false` to prevent automatic deletion.
  # Default: `false`
  delete_branch_on_merge: true  
 branches:
#   # If the name of the branch value is specified as `default`, then the app will create a branch protection rule to apply against the default branch in the repo
   - name: main
     # https://developer.github.com/v3/repos/branches/#update-branch-protection
     # Branch Protection settings. Set to null to disable
     protection:
       # Required. Require at least one approving review on a pull request, before merging. Set to null to disable.
       required_pull_request_reviews:
         # The number of approvals required. (1-6)
         required_approving_review_count: 1
         # Dismiss approved reviews automatically when a new commit is pushed.
         dismiss_stale_reviews: false
         # Blocks merge until code owners have reviewed.
         require_code_owner_reviews: true
         # Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
         require_last_push_approval: true
         #Allow specific users, teams, or apps to bypass pull request requirements. Set to null to disable.
#       bypass_pull_request_allowances:
#          apps: []
#          users: []
#          teams: []
#       #Specify which users and teams can dismiss pull request reviews. Pass an empty dismissal_restrictions object to disable. User and team dismissal_restrictions are only available for organization-owned repositories. Omit this parameter for personal repositories.
#       dismissal_restrictions:
#          users: []
#          teams: []
#       #Required. Require status checks to pass before merging. Set to null to disable
#       required_status_checks:
#         #Required. Require branches to be up to date before merging.
#        strict: true
#         #Required. The list of status checks to require in order to merge into this branch
#        contexts: []
#       #Required. Enforce all configured restrictions for administrators. Set to true to enforce required status checks for repository administrators. Set to null to disable.
#       enforce_admins: true
#       #Required. Restrict who can push to this branch. Team and user restrictions are only available for organization-owned repositories. Set to null to disable.
#       restrictions:
#        apps: []
#        users: []
#        teams: []
#validator:
      pattern: '[a-zA-Z0-9_-]+_[a-zA-Z0-9_-]+.*' 


  rulesets:
    - name: super cool ruleset
      target: branch
      enforcement: active
      bypass_actors:
        - actor_id: 234
          actor_type: Team
          bypass_mode: always
      conditions:
        ref_name:
          include:
            - refs/heads/main
            - refs/heads/master
          exclude:
            - refs/heads/dev*
      rules:
        - type: commit_author_email_pattern
          parameters:
            operator: contains
            pattern: github


  optional:
  # here is an example of an optional setting. (All settings upder the optional section are optional)
  # if the issue does not specify the setting, then the setting defined here will be applied.
  # if the issue specifies the setting, then the setting in the issue will be applied.
    description: Repo updated using Safe Settings
# The following attributes are applied to any repo within the org
# So if a repo is not listed above is created or edited
# The app will apply the following settings to it
#labels:
    Labels: define labels for Issues and Pull Requests
    - name: bug
      color: CC0000
      description: An issue with the system

  #- name: feature
    # If including a `#`, make sure to wrap it with quotes!
  #  color: '#336699'
  #  description: New functionality.

  #- name: first-timers-only
    # include the old name to rename an existing label
  #  oldname: Help Wanted
  #  color: '#326699'

  #- name: new-label
    # include the old name to rename an existing label
  #  oldname: Help Wanted
  #  color: '#326699'

  collaborators:
# Collaborators: give specific users access to any repository.
# See https://developer.github.com/v3/repos/collaborators/#add-user-as-a-collaborator for available options


  # the assumption is that the GH server has been joined to an IdP and that the Teams' permissions
  # are already assigned.
  - teams:
      - name: TeamA

# branches:
#   # If the name of the branch value is specified as `default`, then the app will create a branch protection rule to apply against the default branch in the repo
#   - name: main
#     # https://developer.github.com/v3/repos/branches/#update-branch-protection
#     # Branch Protection settings. Set to null to disable
#     protection:
#       # Required. Require at least one approving review on a pull request, before merging. Set to null to disable.
#       required_pull_request_reviews:
#         # The number of approvals required. (1-6)
#         required_approving_review_count: 1
#         # Dismiss approved reviews automatically when a new commit is pushed.
#         dismiss_stale_reviews: true
#         # Blocks merge until code owners have reviewed.
#         require_code_owner_reviews: true
#         # Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
#         require_last_push_approval: true
#         #Allow specific users, teams, or apps to bypass pull request requirements. Set to null to disable.
#       bypass_pull_request_allowances:
#          apps: []
#          users: []
#          teams: []
#       #Specify which users and teams can dismiss pull request reviews. Pass an empty dismissal_restrictions object to disable. User and team dismissal_restrictions are only available for organization-owned repositories. Omit this parameter for personal repositories.
#       dismissal_restrictions:
#          users: []
#          teams: []
#       #Required. Require status checks to pass before merging. Set to null to disable
#       required_status_checks:
#         #Required. Require branches to be up to date before merging.
#        strict: true
#         #Required. The list of status checks to require in order to merge into this branch
#        contexts: []
#       #Required. Enforce all configured restrictions for administrators. Set to true to enforce required status checks for repository administrators. Set to null to disable.
#       enforce_admins: true
#       #Required. Restrict who can push to this branch. Team and user restrictions are only available for organization-owned repositories. Set to null to disable.
#       restrictions:
#        apps: []
#        users: []
#        teams: []
        
#validator:
  #pattern: '[a-zA-Z0-9_-]+_[a-zA-Z0-9_-]+.*' 